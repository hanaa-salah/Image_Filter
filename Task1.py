# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import numpy as np
import matplotlib.pyplot as plt

from skimage.color import  rgb2hsv, rgb2gray, hsv2rgb
from scipy.signal import convolve2d
import cv2
from matplotlib import pyplot 
import numpy as np
from skimage.color import rgb2gray
from math import sqrt
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from GUI import Ui_MainWindow , MplCanvas
from PyQt5 import QtCore, QtGui, QtWidgets,uic
from PyQt5.QtWidgets import QMainWindow , QApplication , QLabel 
from pyqtgraph import ImageView 
import matplotlib

class UI(QMainWindow):
    def __init__(self):
        super(UI,self).__init__()
        self.u=MplCanvas()
        self.ui = Ui_MainWindow()
        uic.loadUi("GUI.ui",self)
        self.ui.setupUi(self)
############## GUI FOR CHOOSE THE DOMAIN ###############

        

################   connection ################
        self.ui.choosedomain.activated.connect(self.choose)
        self.ui.choosefilter.activated.connect(self.choose)
        self.ui.actionOpen.triggered.connect(lambda: self.load())


        self.fft_img_filtered_IN = []
        self.fft_img_filtered_OUT = []
        self.lowpass = (1 / 16.0) * np.array([[1., 2., 1.],
                                  [2., 4., 2.],
                                  [1., 2., 1.]])
        self.highpass =  np.array([[0.0,-1.0,0.0],[-1.0,5.0,-1.0],[0.0,-1.0,0.0]])
    ###############  load image   ###############

    def load (self):
        self.ui.fig.clf()
        self.u.axes = self.ui.fig.gca()
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        image = cv2.imread(self.filename)
        self.img=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        self.img_gray=rgb2gray(self.img)
        self.img_gray2=cv2.convertScaleAbs(self.img_gray,alpha=50 , beta=-20)
        self.s = self.img_gray2.shape
        print (self.s)
        self.u.axes.imshow(self.img, aspect='auto')
        self.ui.image_canvas.draw() 
        self.ui.image_canvas.flush_events()
        self.equalization()
        
       
        
        
    def choose(self):
        
        if  self.ui.choosedomain.currentIndex()==1:
            
            self.ui.choosefilter.setItemText(1," Low Pass Filter")
            self.ui.choosefilter.setItemText(2, " High Pass Filter")
            self.ui.choosefilter.setItemText(3, " ")

            if self.ui.choosefilter.currentIndex()==1:
                
                self.lowpassfilter()
            elif self.ui.choosefilter.currentIndex()==2:
                self.highpassfilter()
        elif self.ui.choosedomain.currentIndex()==2:
            self.ui.choosefilter.setItemText(1, " Sepia Filter")
            self.ui.choosefilter.setItemText(2, " Emboss Filter")
            self.ui.choosefilter.setItemText(3,  " Sobel Filter")
            self.ui.choosefilter.setItemText(4,  " blur Filter")
            self.ui.choosefilter.setItemText(5,  " sharp Filter")
            if self.ui.choosefilter.currentIndex()==1:
                self.Sepia_Filter()
            elif self.ui.choosefilter.currentIndex()==2:
                self.Emboss_Filter()
            elif self.ui.choosefilter.currentIndex()==3:
                self.sobel_filter()
            elif self.ui.choosefilter.currentIndex()==4:
                self.blur()
            elif self.ui.choosefilter.currentIndex()==5:
                self.Sharpen_Filter()

        elif self.ui.choosedomain.currentIndex()==3:
            self.ui.choosefilter.setItemText(1, " Low Pass Filter RGB")
            self.ui.choosefilter.setItemText(2, " High Pass Filter RGB")
            self.ui.choosefilter.setItemText(3,  " ")
            self.ui.choosefilter.setItemText(4,  " ")
            self.ui.choosefilter.setItemText(5,  " ")
            if self.ui.choosefilter.currentIndex()==1:
                self.plotlowpass()
            elif self.ui.choosefilter.currentIndex()==2:
                self.plothighpass()
           



                
                
############ LOW PASS FILTER ##################
        
    def lowpassfilter (self):
        self.ui.fig2.clear()
        self.ui.fig2.clf()
        self.u.axes = self.ui.fig2.gca()
        original=np.fft.fft2(self.img_gray)
        centered_Img=np.fft.fftshift(original)
        LP_centered_shifted= centered_Img *self.idealFilterLP(50,self.img.shape)
        LowPass_shifted = np.fft.ifftshift(LP_centered_shifted)
        inverse_LowPass = np.fft.ifft2(LowPass_shifted)
        self.u.axes.imshow(np.log(1+np.abs(inverse_LowPass)),'gray', aspect='auto')
        self.ui.fig2.suptitle("Low Pass Filter")
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()

    def distanceLP(self,point1,point2):
        return sqrt((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2)

    def idealFilterLP(self,D0,imgShape):
        base = np.zeros(imgShape[:2])
        rows, cols = imgShape[:2]
        center = (rows/2,cols/2)
        for x in range(cols):
            for y in range(rows):
                if self.distanceLP((y,x),center) < D0:
                    base[y,x] = 1
        return base
    

############ HIGH PASS FILTER ################


    def highpassfilter(self):
        self.ui.fig2.clear()
        self.ui.fig2.clf()
        self.u.axes = self.ui.fig2.gca()
        original=np.fft.fft2(self.img_gray)
        centered_Img=np.fft.fftshift(original)
        HP_centered_shifted= centered_Img *self.idealFilterHP(50,self.img.shape)
        HPPass_shifted = np.fft.ifftshift(HP_centered_shifted)
        inverse_HPPass = np.fft.ifft2(HPPass_shifted)
        self.u.axes.imshow(np.log(1+np.abs(inverse_HPPass)),'gray', aspect='auto')
        self.ui.fig2.suptitle("High Pass Filter")
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()
    def distanceHP(self,point1,point2):
        return sqrt((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2)
    def idealFilterHP(self,D0,imgShape):
        base = np.ones(imgShape[:2])
        rows, cols = imgShape[:2]
        center = (rows/2,cols/2)
        for x in range(cols):
            for y in range(rows):
                if self.distanceHP((y,x),center) < D0:
                    base[y,x] = 0
        return base


#############   SPATIAL DOMAIN    ###############

    def Sepia_Filter (self):
        self.ui.fig2.clear()
        self.ui.fig2.clf()
        self.u.axes = self.ui.fig2.gca()
        Sepia_Kernel = np.array([[0.272, 0.534, 0.131],[0.349, 0.686, 0.168],[0.393, 0.769, 0.189]])
        Sepia_Effect_Img = cv2.filter2D(src=self.img, kernel=Sepia_Kernel, ddepth=-1)
        self.u.axes.imshow(Sepia_Effect_Img,cmap="gray", aspect='auto')
        self.ui.fig2.suptitle("Sepia Filter")
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()

    def Emboss_Filter(self):
        self.ui.fig2.clear()
        self.u.axes = self.ui.fig2.gca()
        Emboss_Kernel = np.array([[0,-1,-1],[1,0,-1],[1,1,0]])
        Emboss_Effect_Img = cv2.filter2D(src=self.img, kernel=Emboss_Kernel, ddepth=-1)
        self.u.axes.imshow(Emboss_Effect_Img,cmap="gray", aspect='auto') 
        self.ui.fig2.suptitle('Emboss_Filter ')
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()
    
    def sobel_filter (self):
        self.ui.fig2.clear()
        self.u.axes = self.ui.fig2.gca()
        img = cv2.GaussianBlur(self.img_gray,(3,3),0) #Gaussia to remove noise

        laplacian = cv2.Laplacian(img,cv2.CV_64F)
        sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)  # Kernel on X
        sobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)  # Kernel on Y

        self.u.axes.imshow(sobelx,cmap = 'gray', aspect='auto')
        self.ui.fig2.suptitle('sobel x')
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()
    def blur(self):
        self.ui.fig2.clear()
        self.u.axes = self.ui.fig2.gca()
        blur_Kernel = np.ones((5, 5), np.float32) / 25
        blur_Effect_Img = cv2.filter2D(src=self.img, ddepth=-1, kernel=blur_Kernel)
        self.u.axes.imshow(blur_Effect_Img,cmap="gray", aspect='auto')
        self.ui.fig2.suptitle('blur_Filter ')
        self.ui.image2_canvas.draw()
        self.ui.image2_canvas.flush_events()
    def Sharpen_Filter(self):
        self.ui.fig2.clear()
        self.u.axes = self.ui.fig2.gca()
        Sharpen_Kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
        Sharpen_Effect_Img = cv2.filter2D(src=self.img, kernel=Sharpen_Kernel, ddepth=-1)
        self.u.axes.imshow(Sharpen_Effect_Img,cmap="gray", aspect='auto')
        self.ui.fig2.suptitle('Sharpen_Filter ')
        self.ui.image2_canvas.draw()
        self.ui.image2_canvas.flush_events()

################## HISTOGRAM EQUALIZATION ##############
    def Hist(self,image):
        self.Histogram = np.zeros(256)
        self.s = image.shape
        height = image.shape[0]
        width = image.shape[1]
        for i in range(0,height):
            for j in range(0,width):
                k=image[i,j]
                self.Histogram[k]+=1
        for i in range (0, len(self.Histogram)):
            self.Histogram[i] /= height*width


        return self.Histogram
    
    def histogramEqualization(self,histogram, image):
        cdf = np.zeros(256)
        cdf[0] = histogram[0]
        for i in range(1, 256):
            cdf[i] = cdf[i-1] + histogram[i]
            
        height = image.shape[0]
        width = image.shape[1]
            
        for i in range(0, height):
            for j in range(0, width):
                intensity = image[i, j]
                newIntensity = cdf[intensity]
                image[i, j] = int(newIntensity*255)
        
        return image
    def equalization (self):
        self.ui.fig3.clear()
        self.u.axes = self.ui.fig3.gca()
        self.ui.fig4.clear()
        self.u.axes2 = self.ui.fig4.gca()
        self.ui.fig5.clear()
        self.u.axes3 = self.ui.fig5.gca()
        # Convert the image to type uint8 and scale intensity values to the range 0-255
        # Note numpy min/max flatten the 2D array, so you obtain the min/max of the entire image
        im_uint8 = ((self.img_gray - np.min(self.img_gray)) * (1/(np.max(self.img_gray) - np.min(self.img_gray)) * 255)).astype('uint8')
        hist = self.Hist(im_uint8)
        self.u.axes.bar(np.arange(len(hist)),hist)
        newimage = self.histogramEqualization(hist,im_uint8)
        self.u.axes2.imshow(newimage,cmap='gray')
        self.ui.fig4.suptitle("After Histogram")

        newhist = self.Hist(newimage)
        self.u.axes3.bar(np.arange(len(newhist)),newhist)
        self.ui.fig5.suptitle("After ")
        self.ui.image3_canvas.draw() 
        self.ui.image3_canvas.flush_events()
        self.ui.image4_canvas.draw() 
        self.ui.image4_canvas.flush_events()
        self.ui.image5_canvas.draw() 
        self.ui.image5_canvas.flush_events()
    ################ BONES ##############
    
        
    def multi_convolver(self,image, kernel, iterations):
        for i in range(iterations):
            image = convolve2d(image, kernel, 'same', boundary = 'fill',
                                fillvalue = 0)
        return image
    def convolver_rgb(self,image, kernel, iterations = 1):
        img_yuv = rgb2hsv(image)   
        img_yuv[:,:,2] = self.multi_convolver(img_yuv[:,:,2], kernel, 
                                        iterations)
        final_image = hsv2rgb(img_yuv)
        return final_image
    def plotlowpass(self):
        convolved_rgb_gauss = self.convolver_rgb(self.img, self.lowpass, 2)
        self.ui.fig2.clear()
        self.u.axes = self.ui.fig2.gca()
        self.u.axes.imshow(convolved_rgb_gauss)
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()
    def plothighpass(self):
        convolved_rgb_gauss = self.convolver_rgb(self.img_gray, self.highpass, 2)
        self.ui.fig2.clear()
        self.u.axes = self.ui.fig2.gca()
        self.u.axes.imshow(convolved_rgb_gauss)
        self.ui.image2_canvas.draw() 
        self.ui.image2_canvas.flush_events()
         





        
       



def main():
    app = QApplication(sys.argv)
    main = UI()
    main.show()
    sys.exit(app.exec_())

if __name__ == '__main__':      
 main()